#if !canImport(ObjectiveC)
import XCTest

extension ArchiverTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArchiverTests = [
        ("testTarArchiverArchiveDoesntExist", testTarArchiverArchiveDoesntExist),
        ("testTarArchiverDestinationDoesntExist", testTarArchiverDestinationDoesntExist),
        ("testTarArchiverDestinationIsFile", testTarArchiverDestinationIsFile),
        ("testTarArchiverInvalidArchive", testTarArchiverInvalidArchive),
        ("testTarArchiverSuccess", testTarArchiverSuccess),
        ("testTarNotImplementedExtension", testTarNotImplementedExtension),
        ("testZipArchiverArchiveDoesntExist", testZipArchiverArchiveDoesntExist),
        ("testZipArchiverDestinationDoesntExist", testZipArchiverDestinationDoesntExist),
        ("testZipArchiverDestinationIsFile", testZipArchiverDestinationIsFile),
        ("testZipArchiverInvalidArchive", testZipArchiverInvalidArchive),
        ("testZipArchiverSuccess", testZipArchiverSuccess),
    ]
}

extension ArgumentParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArgumentParserTests = [
        ("testBasics", testBasics),
        ("testBinderThrows", testBinderThrows),
        ("testBoolParsing", testBoolParsing),
        ("testErrors", testErrors),
        ("testIntParsing", testIntParsing),
        ("testOptionalPositionalArg", testOptionalPositionalArg),
        ("testOptions", testOptions),
        ("testPathArgument", testPathArgument),
        ("testRemainingStrategy", testRemainingStrategy),
        ("testShellCompletionGeneration", testShellCompletionGeneration),
        ("testSingleValueMultipleTimes", testSingleValueMultipleTimes),
        ("testSubparser", testSubparser),
        ("testSubparserBinder", testSubparserBinder),
        ("testSubsubparser", testSubsubparser),
        ("testUpToNextOptionStrategy", testUpToNextOptionStrategy),
    ]
}

extension CollectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CollectionTests = [
        ("testSplitAround", testSplitAround),
    ]
}

extension DownloaderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DownloaderTests = [
        ("testClientError", testClientError),
        ("testFileSystemError", testFileSystemError),
        ("testServerError", testServerError),
        ("testSuccess", testSuccess),
    ]
}

extension InterruptHandlerTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__InterruptHandlerTests = [
        ("testBasics", testBasics),
    ]
}

extension JSONMessageStreamingParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__JSONMessageStreamingParserTests = [
        ("testInvalidMessageBytes", testInvalidMessageBytes),
        ("testInvalidMessageInvalidValue", testInvalidMessageInvalidValue),
        ("testInvalidMessageMissingField", testInvalidMessageMissingField),
        ("testInvalidMessageSizeBytes", testInvalidMessageSizeBytes),
        ("testInvalidMessageSizeValue", testInvalidMessageSizeValue),
        ("testParse", testParse),
    ]
}

extension PkgConfigParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PkgConfigParserTests = [
        ("testBrewPrefix", testBrewPrefix),
        ("testCustomPcFileSearchPath", testCustomPcFileSearchPath),
        ("testEmptyCFlags", testEmptyCFlags),
        ("testEscapedSpaces", testEscapedSpaces),
        ("testGTK3PCFile", testGTK3PCFile),
        ("testUnevenQuotes", testUnevenQuotes),
        ("testUnresolvablePCFile", testUnresolvablePCFile),
        ("testVariableinDependency", testVariableinDependency),
    ]
}

extension PlatformTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PlatformTests = [
        ("testFindCurrentPlatformAndroid", testFindCurrentPlatformAndroid),
        ("testFindCurrentPlatformDebian", testFindCurrentPlatformDebian),
        ("testFindCurrentPlatformFedora", testFindCurrentPlatformFedora),
    ]
}

extension PolymorphicCodableTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PolymorphicCodableTests = [
        ("testBasic", testBasic),
    ]
}

extension ProgressAnimationTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ProgressAnimationTests = [
        ("testNinjaProgressAnimationDumbTerminal", testNinjaProgressAnimationDumbTerminal),
        ("testNinjaProgressAnimationTTY", testNinjaProgressAnimationTTY),
        ("testPercentProgressAnimationDumbTerminal", testPercentProgressAnimationDumbTerminal),
        ("testPercentProgressAnimationTTY", testPercentProgressAnimationTTY),
    ]
}

extension SimplePersistenceTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__SimplePersistenceTests = [
        ("testBackwardsCompatibleStateFile", testBackwardsCompatibleStateFile),
        ("testBasics", testBasics),
        ("testCanLoadFromOldSchema", testCanLoadFromOldSchema),
    ]
}

extension StringConversionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringConversionTests = [
        ("testManglingToBundleIdentifier", testManglingToBundleIdentifier),
        ("testManglingToC99ExtendedIdentifier", testManglingToC99ExtendedIdentifier),
    ]
}

extension StringTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringTests = [
        ("testChuzzle", testChuzzle),
        ("testEmptyChomp", testEmptyChomp),
        ("testSeparatorChomp", testSeparatorChomp),
        ("testSplitAround", testSplitAround),
        ("testTrailingChomp", testTrailingChomp),
    ]
}

extension URLTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__URLTests = [
        ("testSchema", testSchema),
    ]
}

extension VersionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VersionTests = [
        ("testComparable", testComparable),
        ("testContains", testContains),
        ("testDescription", testDescription),
        ("testEquality", testEquality),
        ("testFromString", testFromString),
        ("testHashable", testHashable),
        ("testOrder", testOrder),
        ("testRange", testRange),
    ]
}

extension miscTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__miscTests = [
        ("testClangVersionOutput", testClangVersionOutput),
        ("testVersion", testVersion),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArchiverTests.__allTests__ArchiverTests),
        testCase(ArgumentParserTests.__allTests__ArgumentParserTests),
        testCase(CollectionTests.__allTests__CollectionTests),
        testCase(DownloaderTests.__allTests__DownloaderTests),
        testCase(InterruptHandlerTests.__allTests__InterruptHandlerTests),
        testCase(JSONMessageStreamingParserTests.__allTests__JSONMessageStreamingParserTests),
        testCase(PkgConfigParserTests.__allTests__PkgConfigParserTests),
        testCase(PlatformTests.__allTests__PlatformTests),
        testCase(PolymorphicCodableTests.__allTests__PolymorphicCodableTests),
        testCase(ProgressAnimationTests.__allTests__ProgressAnimationTests),
        testCase(SimplePersistenceTests.__allTests__SimplePersistenceTests),
        testCase(StringConversionTests.__allTests__StringConversionTests),
        testCase(StringTests.__allTests__StringTests),
        testCase(URLTests.__allTests__URLTests),
        testCase(VersionTests.__allTests__VersionTests),
        testCase(miscTests.__allTests__miscTests),
    ]
}
#endif
